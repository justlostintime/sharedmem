' Gambas test file

Public Sub aSaveLoadSharedMemBlock()
  With SharedMem
  SharedMem.begin(123456)                   ' create a fixed shared memory segment
  
  SharedMem["MyVar1"] = 1
  SharedMem["MyVar2"] = CLong(20)
  SharedMem["MyAry1"] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4]
  SharedMem["MyAry2"] = ["TestValue", "TestValue2", "sfeewetrergfweqwegfergerergergergerg", "34t34t3t34t34t34tt434t3t4t3t"]
  SharedMem["MyVarAry1"] = [SharedMem["MyVar1"], SharedMem["MyVar2"], SharedMem["MyAry1"]]
  'Print "Before Save Default save = ", SharedMem["MyVar1"], SharedMem["MyVar2"], SharedMem["MyAry1"][1], SharedMem["MyAry2"][1], SharedMem["MyVarAry1"][2][0]
  
  '********************************************************************
  Dim StartingVarList As String = SharedMem.VariableList()
  'Print " Variable name ["; SharedMem.VariableList(); "]"
  
  Try SharedMem.End(".")  ' save to default file
  Assert.Noterror("Created Sharedmem image")

  
  Try SharedMem.begin()   ' load from default file
  Assert.Noterror("Loaded the Shared memory from a file")
  Assert.Equals(SharedMem["MyVar1"], 1, " Read back a variable value after load")
  Assert.Equals(SharedMem["MyAry2"][1], "TestValue2", "Verify Array was saved correctly")
  
  '***********************************************************************
  Dim ReloadStartingVarList As String = SharedMem.VariableList()
  Try SharedMem.End()     ' stop and dont save the memory
  Assert.Noterror("End with no save")
  
  Try SharedMem.begin(123456)  ' define a new block of memory
  Assert.Noterror("Allocate an unnamed block no load of data")
  
  SharedMem["My2Var1"] = 1
  SharedMem["My2Var2"] = CLong(20)
  SharedMem["My2Ary1"] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4]
  SharedMem["My2Ary2"] = ["TestValue", "TestValue2", "sfeewetrergfweqwegfergerergergergerg", "34t34t3t34t34t34tt434t3t4t3t"]
  SharedMem["My2VarAry1"] = [SharedMem["My2Var1"], SharedMem["My2Var2"], SharedMem["My2Ary1"]]
  'Print "Before Save named save  ", SharedMem["My2Var1"], SharedMem["My2Var2"], SharedMem["My2Ary1"], SharedMem["My2Ary2"], SharedMem["My2VarAry1"]
  
  Dim MyMemoryVarList As String = SharedMem.VariableList()
  
  'Print " Variable name ["; SharedMem.VariableList(); "]"
  
  Try SharedMem.End("MyMemory.mem")
  Assert.Noterror("Veryify save as a named file mymemory.mem")
  
  Try SharedMem.begin()       ' load the default memory
  Assert.Noterror("Begin with default memory image")
  
  'Print "After Restore default save reloaded" & SharedMem["MyVar1"], SharedMem["MyVar2"], SharedMem["MyAry1"], SharedMem["MyAry2"], SharedMem["MyVarAry1"]
  Dim SecondReloadStartupVarList As String = SharedMem.VariableList()
  SharedMem["MyNewStore"] = "this string"
  'Print "Added new variable and save memory MyNewStore ", SharedMem["MyNewStore"]
  Dim ChangedStartupVarList As String = SharedMem.VariableList()

  'Print " Variable name ["; SharedMem.VariableList(); "]"
  
  Try SharedMem.End(".")      ' save it to the default file
  Assert.Noterror("Shared memory to default memory file")
  
  Try SharedMem.begin("MyMemory.mem") ' load from other shared memory
  Assert.Noterror("reload the mymemory.mem image")
  
  'Print "After Restore named save " & SharedMem["My2Var1"], SharedMem["My2Var2"], SharedMem["My2Ary1"], SharedMem["My2Ary2"], SharedMem["My2VarAry1"]
  Dim ReloadMyMemoryVarList As String = SharedMem.VariableList()
  'Print " Variable name ["; SharedMem.VariableList(); "]"
  Try SharedMem.End()            ' close release shared memory
  Assert.Noterror("end shared memory no save of image")
  
  Try SharedMem.Begin() ' load default file
  Assert.Noterror("Load default image")
  
  Try SharedMem.Merge("MyMemory.mem")
  Assert.Noterror("Merge MyMemory.mem, with default image")
  
  Dim CombinedVarList As String = SharedMem.VariableList()
  'Print SharedMem.VariableList()
  Try SharedMem.Sync()
  Assert.NotError("Sync the default saved image with all the info merged from the myMemory.mem")
  Assert.Equals(SharedMem["My2Var2"], 20, "Verify the merge worked correctly read My2Var2 is equal 20")
  Assert.Equals(SharedMem["MyVar2"], 20, "Verify the merge worked correctly read MyVar2 is equal 20")
  
  Try SharedMem.End()
  Assert.Noterror("End with no save")
  
  Assert.Equals(StartingVarList, ReloadStartingVarList, "Test Reload Section 1")
  Assert.Equals(StartingVarList, SecondReloadStartupVarList, "Test Reload Section 2")
  Assert.equals(MyMemoryVarList, ReloadMyMemoryVarList, "Test Reload Differential")
  Assert.NotEquals(StartingVarList, ChangedStartupVarList, "Test After adding var")
  Assert.Equals(ChangedStartupVarList & " , " & Right(MyMemoryVarList, -13), CombinedVarList, "Test Merge variables")

  
  End With
End

' Gambas module file

Public Sub bSaveAndLoadVariables()
  Dim iString As String[]
  Dim b As Variant
  Dim a As New SharedObjectExample
  Dim c As SharedObjectExample
  Dim TheString As String[] 
  
  With SharedMem
  .begin(12800)
  
  .["TheInteger[]"] = [0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 100]
  .["TheString[]"] = ["Validdata", "sdfsergtergtergergergergerggrergerggerggrggr", "sdgdgdgsgddgsdgsgdsdgsdggsdsdgsdgsdgsgdsgd"]
  TheString = .["TheString[]"]
  .TheString = "abc"
  .TheString = ".Add................................\nabcdefghijklmnopqrstuvwxyz0123456789"
  .TheString = "Sub aaa()\nLabel1:\nprint \"hello\"\ngoto Label1\nend\n"
  
  .TheNumber = 23
  Assert.Equals(.TheNumber, 23, "Verify Creation of variable")
  .TheNumber = "ThisEntry"
  Assert.Equals(.TheNumber, "ThisEntry", "Verify Auto DataType Change N->S of variable")
  .TheNumber = 25
  Assert.Equals(.TheNumber, 25, "Verify Auto DataType Change s->n of variable")
  Try .End("/tmp/file1")
  Assert.Noterror("Save Image to temp file")
  
  Try .begin("/tmp/file1")
  Assert.Noterror("Reload the temp image")
  ' 
  .WriteVarTo("TheString")
  Dim BeforeLoad As String = .TheString
  .ReadVarFrom("TheString")
  Assert.Equals(BeforeLoad, .TheString, "Verify that Save and loading a singles Variable works")
  
  
  '' Work with objects
  
  .["TheObject"] = New SharedObjectExample
  .["TheObject2"] = New SharedObjectExample
  .WriteVarTo("TheObject", "/tmp/file2")
  .ReadVarFrom("TheObject2", "/tmp/file2")
  Assert.Equals(.TheObject(), .TheObject2(), "Veryify we can save and load a single object")
  
  .WriteVarTo("TheObject")
  .ReadVarFrom("TheObject")
  Assert.Equals(.TheObject.ThisArray[0], "bob", "Verify we load And saved object correctly")
  
  .TheObject = .TheObject.Set(["a", "b", "c"])
  a.set(["a", "b", "c"])
  .Object3 = a
  c = .Object3
  Assert.Equals(a.ThisArray[0], c.ThisArray[0], "Verify that objects are copied to and from the memory database correctly")
  
  '' End of object testing  
    
  .WriteVarTo("TheString[]")
  .free("TheString[]")
  .ReadVarFrom("TheString[]")
  Assert.Equals(.["TheString[]"][0], TheString[0], "Verify we can save Var/delete from database/Recreate from file")
    
  
  iString = .["TheString[]"]
  .TheString = "This is a test of the whole darn suite"

  .End(".")
 
  End With

End

Public Sub cClearMerge()
Dim firstVarList As String
With SharedMem
  
  .Begin(128000)
      .ThisVar = 100
      .ThatVar = "This String"
      Assert.Equals(.ThisVar, 100, "Verify we created the variables")
      firstVarList = .VariableList()
  .End(".")
  
  .Begin(".")
  
    Assert.Equals(FirstVarList, .VariableList(), "Ensure we reloaded the same list")
    
    .ClearMem()
    Assert.Notequals(FirstVarList, .VariableList(), "Ensure clear mem worked")
    .["Boss"] = "mean"
    .["Sassy"] = "girl"
    
     FirstVarList = .VariableList()
    
     .Sync(".")
     
     .ClearMem()
     .merge(".")
     Assert.Equals(FirstVarList, .VariableList(), "Ensure we can cleanmem and then merge an image with it")
  .End(".")
  
End With
  
End

