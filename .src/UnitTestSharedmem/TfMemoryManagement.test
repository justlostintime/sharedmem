' Gambas test file

' Gambas module file

Const LoopCount As Integer = 1000
Private starttime As Float

Public Sub a_ALLOCFree()

  With sharedmem

    .Begin(128000)

    'begin does some stuff to remove for this test See- SharedMemWaitQueue _Begin
    .ShmFree(.["NotifyList"])
    .free("notifylist")

    starttime = Timer
    For i As Integer = 1 To LoopCount

      SharedMem["ThisString"] = "This is a test string of this size"
      SharedMem["ThisFloat"] = 0.0
      SharedMem["ThisLong"] = CLong(0)
      SharedMem["ThisInt"] = 0
      SharedMem["ThatString"] = "************************************************************************************************"
      SharedMem["MyARRAY"] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

      'SharedMem._print()

      SharedMem.Free("ThisLong")
      SharedMem.Free("ThisInt")
      SharedMem.Free("ThisFloat")

      'SharedMem._print()

      SharedMem.free("ThatString")


      'SharedMem._print()

      SharedMem.free("ThisString")

      'SharedMem._print()

      SharedMem.free("MyARRAY")

      .a = "asdasdasd"
      .b = "hhhhhhhhhhhh"
      .free("b")
      .e = ""
      .d = 6

      .b = "wqewweweqwe"
      .free("b")
      .free("a")
      .free("e")
      .free("d")

      If SharedMem.used() <> 0 Then
        'Print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        'Print "Used Amount reports "; .used();; " After "; i;; "Loops"
        'SharedMem._print()
        Assert.Fail("Used(" & .used() & ") Not zero Total time = " & Str(Timer - starttime) & " Ops/Sec =" & Str((LoopCount * 6) / (Timer - starttime)))
      Endif

    Next

    Assert.Pass("Alloc/Free time = " & Str(Timer - starttime) & "Total Ops=" & Str(LoopCount * 6) & " Ops/Sec =" & Str((LoopCount * 6) / (Timer - starttime)))

    SharedMem.End()
  End With

End

Public Sub b_lowLevelAllocAndFree()

  With sharedmem
    Dim pp As Pointer
    Dim xx As Pointer
    Dim yy As Pointer
    Dim aa As Pointer
    Dim cc As Pointer


    .begin(500000)
    'begin does some stuff to remove for this test See- SharedMemWaitQueue _Begin
    .ShmFree(.["NotifyList"])
    .free("notifylist")

    Dim starttime As Float = Timer
    For i As Integer = 0 To 500000

      pp = .ShmAlloc(500)
      '._print()
      xx = .ShmAlloc(1000)
      '._print()
      yy = .ShmAlloc(800)
      '._print()
      aa = .ShmAlloc(700)
      '._print()
      'Print " ===========================================================================================End allocations";; pp;; xx;; yy;; aa

      .ShmFree(xx)
      '._print()
      .ShmFree(aa)
      '._print()
      .ShmFree(yy)
      '._print()
      .ShmFree(pp)
      '._print()
      'Print "============================================================================================End Free "

      ' Print "Begin Reallocation of old blocks"
      ' xx = .ShmAlloc(900)
      '  '   ._print()
      ' aa = .ShmAlloc(100)
      '  '   ._print()
      ' cc = .ShmAlloc(94)
      '  '   ._print()
      ' bb = .ShmAlloc(1200)
      '  '   ._print()
      'Print "===========================================================================================Done reallocate blocks";; xx;; aa;; cc;; bb

      ' data = 1234567890
      ' .usermem[cc + .DataOffset] = data
      ' ._print()
      '
      ' data = "This is a string to stick into memory"
      ' .usermem[aa + .DataOffset] = data
      ' Print "=============================================================================================DataString"
      ' ._print()
      '
      ' data = .usermem[cc + .DataOffset]
      ' data = .usermem[aa + .DataOffset]
      '
      ' .usermem[bb + .DataOffset] = MyObject
      '
      ' data = .usermem[bb + .DataOffset]
      '
      ' ._print()
    Next
    Print "Time = "; Timer - starttime
    ._print()
    .End()
  End With
  'Print "End Test Alloc Free ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"

End

