' Gambas module file

Public Const WNOHANG As Integer = &h00000001
Public Const WUNTRACED As Integer = &h00000002
Public Const WSTOPPED As Integer = &h00000002
Public Const WEXITED As Integer = &h00000004
Public Const WCONTINUED As Integer = &h00000008
Public Const WNOWAIT As Integer = &h01000000         ' / * Don 't reap, just poll status.  */

Public Const __WNOTHREAD As Integer = &h20000000     '/ * Don 't wait on children of other threads in this group */
Public Const __WALL As Integer = &h40000000          '/ * Wait On all children, regardless Of type * /
Public Const __WCLONE As Integer = &h80000000        '/ * Wait only On non - SIGCHLD children * /

'/ * First argument To waitid: * /
Public Const P_ALL As Integer = 0
Public Const P_PID As Integer = 1
Public Const P_PGID As Integer = 2
Public Const NotifyObjectCount As Integer = 50
Public Const BGCycles As Integer = 200

Extern waitpid(pid As Integer, state As Pointer, flags As Integer) As Integer In "libc:6"
Extern getpid() As Integer In "libc:6"


Public Sub main()

  Dim MyTask As TestNotifyBG
  Dim MyObject As TestNotifyObject
  Dim MyObjects As Variant[] = New Variant[]
  Dim MyStatus As Integer = 0
  Dim MyResult As Integer = 0
  Dim listing As File

  Dim BGLogFileName As String = user.home &/ "Desktop/gambas.BGLogFile.txt"
  Dim FGLogFileName As String = User.home &/ "Desktop/gambas.FGLogfile.txt"

  listing = Open FGLogFileName For Write Create

  Output To listing

  With SharedMem

    .begin(120000)           ' we are using the task/Fork local variant of shared memory, mem is available to forked tasks and threads

    Error "FG : Testing Change notify Function Pid="; Application.id;; "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
    Print "BG : Writing to log file " & Quote(BGLogFileName)

    !WaitTest = 0   ' create and initialize the variable we will use for the test
    'NotifyChange(Symbol As String, NotifyObject As Object, Optional iTimeOut As Long = 0, FunctionName As String = "") As Boolean
    ' timeout can be  = 0 = wait forever until first occurance          call _change
    '                 < 0 = notify me everytime a location changes      call _change
    '                 > 0 wait for timeout and                          call _nochange
    ' call function names can be overridden by providing function name
    ' waiting for a timeout is very slow and you must execute a wait in your bg task to dispatch the timeout

    .NotifyChange("WaitTest", Me, -1) ' when we wait for a symbol to change the function called is the symbolname + _changed

    Wait

    Print "FG: Creating "; NotifyObjectCount; " Objects to be created to recieve Change messages"
    For i As Integer = 1 To NotifyObjectCount
      MyObject = New TestNotifyObject ' this will just monitor the value
      MyObjects.Add(MyObject)
      Wait
    Next

    MyTask = New TestNotifyBG
    MyTask.LogFileName = BGLogFileName
    MyTask.Cycles = BGCYCLES

    MyResult = waitpid(-1, VarPtr(MyStatus), WNOHANG)
    Print "FG: MyStatus = "; Bin(MyStatus); " MyResult = "; MyResult; " BG Pid = "; MyTask.Handle; " FG Pid = "; getpid(); " Last Error = "; System.error

    Print "FG: INC 'WaitTest' Variable, MyTask = "; MyTask

    Wait 0.5

    Print "FG: Set New Value of WaitTest to ", !WaitTest

    Print "FG: Wait for Background Task to Cycle through";; BGCycles;; "cycles of Incrementing 'WaitTest' Variable"

    '
    ' While True
    '    MyResult = waitpid(-1, VarPtr(MyStatus), 0)
    '    Print "MyStatus = "; Bin(MyStatus); " MyResult = "; MyResult
    '    If MyResult > 0 Then Break
    '    Wait 0.5
    ' Wend

    MyTask.Wait()

    !WaitTest = -1

    .NotifyCancel("WaitTest", Me)
    .End()

    Error "FG : ending Change notify Function PID="; Application.id;; "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"

  End With

End

Public Sub WaitTest_changed(Newvalue As Variant, symname As String)

  Print "FG Notified of Shared memory update for "; Quote(symname); "=", NewValue
  Flush

End
