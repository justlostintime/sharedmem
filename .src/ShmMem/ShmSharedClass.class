' Gambas class file

''' This Class is a template to use when creating classes that will be stored ito the memory database
''' Using this is relatively slow

Property Value As Variant Use $Value = 0                                     '' example class element
Property Index As Integer Use $Index = 100                                 '' Example class element

Property ShmSymName As String Use $SymName = ""            '' Required class element
Property ShmIF As ShmSymbolTable Use $ShmIF = Null          '' Required class element

'' Update the object store with changed information for this object
Public Sub _commit()

  $ShmIF[$SymName] = Me

End

'' Write out all the data that will be saved onto the database

Public Sub _write(OutStream As Stream)

  Write #outstream, $Value As Variant                                     '' example element is stored into the memory database
  Write #outStream, $Index As Integer                                     '' example element is stored into the memory database

End

'' Read back All data for the object from the database
Public Sub _read(InStream As Stream)

  $Value = Read #InStream As Variant                                      '' Example element is read from the memory database
  $Index = Read #InStream As Integer                                       '' Exampe element is read from the memory database

End

'' Modify this to do something useful, it right now does something almost silly
'' Compare the contents of one object to this object, this should implement
'' a > < or = protocol for the objects.
'' Return 0  if they are equal
'' Return 1 if This object is  greater than the OtherObject
'' Return -1 if This object is less than the OtherObject
'' Return -2 if it is an invalid comparison

Public Sub _compare(OtherObject As Variant) As Integer

  If TypeOf(OtherObject) <> gb.object Then
    'if not the same object type then  the other object must contain values with same symbol names

    If TypeOf(OtherObject) = gb.integer Then
      If $Index = OtherObject Then Return 0
      If $Index > OtherObject Then Return 1
      Return -1
    Else
      If $Value = OtherObject Then Return 0
      If $Value > OtherObject Then Return 1
      Return -1
    Endif

  Else

    If OtherObject.Value = $value And If OtherObject.Index = $Index Then Return 0
    If OtherObject.value = $value Then
      If $Index > OtherObject.Index Then Return 1
      Return -1
    Else
      If $Value > OtherObject.Value Then Return 1
      Return -1
    Endif

  Endif

Catch
  ' gets here if it is an invalid comparison
  Return -2

End

Private Function Value_Read() As Variant

  Return $Value

End

Private Sub Value_Write(vValue As Variant)

  $Value = vValue
  Me._commit()                        ' sync memory database with new value

End

Private Function Index_Read() As Integer

  Return $Index

End

Private Sub Index_Write(Value As Integer)

  $Index = Value
  Me._commit()            ' sync memory database with new value

End
